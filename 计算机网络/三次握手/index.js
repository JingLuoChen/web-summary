/**
 *
 * 三次握手：是指建立一个TCP链接时，需要客户端和服务器总共发送三个包
 *
 * 主要作用：为了确认双方的接受能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备
 *
 * 实质：连接服务器指定端口，建立TCP连接，并同步连接双方的序列号和确认号，交换TCP窗口大小信息
 */
//

/*
*
* 连接过程：（客户端 -> Closed状态    服务器 -> Listen状态）
*
* 第一次握手：客户端给服务端发送 SYN 包，并指明客户端的初始化序列号ISN(c)，并进入 SYN_SENT 状态   ------  SYN:同步序列编号
*
*           《--- 首部的同步位 SYN=1   初始序号 seq=x   SYN=1 的报文段不能携带数据，但要消耗掉一个序号 ---》
*
*
*
* 第二次握手：服务器收到客户端的 SYN 包，会以自己的 SYN 包作为应答，并且也是指定了自己的初始化序列号ISN(s)，同时会把客户端的ISN+1 作为ACK的值
*
*           表示自己已经收到了客户端的SYN,此时服务器处于SYN_RECV状态
*
*           《--- 在确认报文段中SYN=1 ACK=1 确认好ack=x+1 初始序号seq=y ---》
*
*
*
* 第三次握手：客户端收到SYN包之后，会发送一个ACK报文，当然，也是一样把服务器的 ISN+1 作为ACK的值，表示已经收到了服务端的 SYN 报文
*
*           此时客户端处于 ESTABLISHED 状态, 服务端收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时双方建立连接
*
*           《--- 确认报文段ACK=1  确认号ack=y+1 序号seq=x+1 ACK报文段可以携带数据，不携带数据则不消耗序号 ---》
*
*
* */

/*
*
* 为什么需要三次握手？
*
* 客户端发出的第一个连接请求报文段并没有丢失，而是在某个网络结点长时间滞留了，以致延误到连接释放以后的某个时间才到达服务器
*
* 本来是一个已经失效的报文段，但服务端误认为客户端又发出一次新的连接请求
*
* 于是向客户端发出确认报文段，同意建立连接
*
* 如果不采用三次握手，只要服务端发出确认，就建立连接了，就会一直等待客户端发来数据，这样服务端的很多资源就白白浪费了
*
* 故会避免服务端资源浪费
*
* */
